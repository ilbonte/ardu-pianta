// I2CSoilMoistureSensor - Version: Latest
#include <I2CSoilMoistureSensor.h>
#include <Wire.h>

// Arduino_MKRENV - Version: Latest
#include <Arduino_MKRENV.h>

/*
  Sketch generated by the Arduino IoT Cloud Thing "Tech"
  https://create.arduino.cc/cloud/things/32e74768-d5d5-4502-8af7-e2144e7e25e3

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing properties

  float temperatura;
  float luce;
  String faicose;
  int moisture;
  bool shouldUpdate;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "string.h"

#define INTERVAL_WATER 20
#define MOISTURE_THRESHOLD 240
#define TEMP_THRESHOLD 35
#define LUX_THRESHOLD 600

I2CSoilMoistureSensor moistureSensor;

int pin = 0;
int pin1 = 1;
String lastValue = "";

int lastTemperature = -1;
int lastLux = -1;
int lastMoisture = -1;

int lastWaterOpen = -1;
void setup() {
  Wire.begin();
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(2000);
  
  moistureSensor.begin(); // reset sensor

  if (! ENV.begin()) {
    Serial.println("MKR ENV shield not found");
    while (1);
  }

  pinMode(pin, OUTPUT);
  pinMode(pin1, OUTPUT);

  faicose = "";

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void openWater() {
  digitalWrite(pin1, HIGH);
  Serial.println("Ho aperto l'acqua");
  lastWaterOpen = millis();
}

void closeWater() {
  digitalWrite(pin1, LOW);
  Serial.println("Ho chiuso l'acqua");
  lastWaterOpen = -1;
}

void openLux() {
  digitalWrite(pin, HIGH);
  Serial.println("Ho acceso la luce");
}

void closeLux() {
  digitalWrite(pin, LOW);
  Serial.println("Ho spento la luce");
}


void onFaicoseChange() {
  Serial.println("Receive" + faicose);

  if (faicose == "accendi la luce") {
    openLux();
  }

  if (faicose == "spegni la luce") {
    closeLux();
  }

  if (faicose == "irriga") {
    openWater();
  }

  if (faicose == "ferma irrigazione") {
    closeWater();
  }
}


void handleUpdates() {
  shouldUpdate = false;
  shouldUpdate = shouldUpdate || (lastMoisture > MOISTURE_THRESHOLD && moisture <= MOISTURE_THRESHOLD);
  shouldUpdate = shouldUpdate || (lastTemperature < TEMP_THRESHOLD && temperatura >= TEMP_THRESHOLD);
  shouldUpdate = shouldUpdate || (lastLux < LUX_THRESHOLD && luce >= LUX_THRESHOLD);
  
  lastMoisture = moisture;
  lastTemperature = temperatura;
  lastLux = luce;
}

void loop() {

  while (moistureSensor.isBusy()) delay(50); // available since FW 2.3

  temperatura = ENV.readTemperature();
  luce = ENV.readLux();

  moisture = moistureSensor.getCapacitance();
  Serial.println(moisture);
  delay(1000);

  if (lastWaterOpen > 0 && millis() - lastWaterOpen > INTERVAL_WATER * 1000) {
    closeWater();
  }

  handleUpdates();

  ArduinoCloud.update();
  shouldUpdate = false;
  ArduinoCloud.update();
  
}


